<?php

namespace App\Http\Controllers;

use App\Models\Pointage;
use App\Models\Administrateur;
use App\Models\Personnel;
use Illuminate\Support\Facades\Validator;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\DB;

class PointageController extends Controller
{
    public function affiche(){
     return view('affiche');
    }


    public function datesPointages()
    {
        // Récupérer tous les personnels avec leurs pointages
        $personnels = Personnel::with('pointage')->get();

        // Initialiser un tableau pour stocker les dates de pointage pour chaque personne
        $datesPointages = [];

        // Parcourir chaque personnel
        foreach ($personnels as $personnel) {
            // Initialiser un tableau pour stocker les dates de pointage pour cette personne
            $personnelDates = [];

            // Parcourir les pointages de cette personne
            foreach ($personnel->pointage as $pointage) {
                // Ajouter la date de pointage au tableau
                $personnelDates[] = $pointage->date->format('Y-m-d');
            }

            // Ajouter les dates de pointage pour cette personne au tableau général
            $datesPointages[$personnel->nom . ' ' . $personnel->prenom] = $personnelDates;
        }

        // Retourner les dates de pointage pour chaque personne
        return $datesPointages;
    }

    /**
     * Display a listing of the resource.
     */
    public function index()
    {
       // $pointages = Pointage::with('personnel')->orderBy('id', 'asc')->paginate(6);
        $pointages = Pointage::all();
        return view('pointage.index', ['pointages' => $pointages]);
    }

    /**
     * Show the form for creating a new resource.
     */
    public function create()
    {
        $personnels = Personnel::all();
        return view('pointage.create', ['personnels' => $personnels]);
    }


    //https://www.akilischool.com/cours/comment-calculer-la-duree-entre-deux-dates-en-laravel
    //https://www.developpez.net/forums/d716382/php/langage/calculer-nombre-d-heures-entre-2-dates/
    /*public function store(Request $request)
    {
        $validatedData = $request->validate([
            'nom' => 'required|string',
            'prenom' => 'required|string',
            'email' => 'required|email',
            'date' => 'required|date',
            'heure_arr' => 'required|date_format:H:i',
            'heure_dep' => 'nullable|date_format:H:i|',
        ]);

        $personnel = Personnel::where('email', $request->email)->first();
        if (!$personnel) {
            return redirect()->back()->with('error', 'Employé non trouvé.');
        }
        $existingPointage = Pointage::where('personnel_id', $personnel->id)->whereDate('date', $request->date)->first();

        if ($existingPointage) {
            return redirect()->back()->with('error', 'Un pointage existe déjà pour ce personnel à cette date');
        }

        $heureDepart = $this->calculerHeureDepart($request->heure_arr, $request->heure_dep, $personnel->horaires_travail);

        $pointage = new Pointage();
        $pointage->personnel_id = $personnel->id;
        $pointage->date = $request->date;
        $pointage->heure_arr = $request->heure_arr;
        $pointage->heure_dep = $heureDepart;
        $pointage->save();


        if (auth()->guard('admin')->check()) {
            return redirect()->route('pointage.index')->with('success', 'Pointage ajouté avec succès');
        } elseif (auth()->check()) {
            return redirect()->route('pointage.index')->with('success', 'Pointage ajouté avec succès');
        } else {
            return redirect()->route('pointage.affiche')->with('success', 'Pointage ajouté avec succès');
        }

    }*/


    /**
     * Show the form for editing the specified resource.
     */




    public function edit(string $id)
    {
        $pointage = Pointage::find($id);
        $personnels = Personnel::all();
        return view('pointage.edit', ['pointage' => $pointage, 'personnels' => $personnels]);
    }



    public function update(Request $request, string $id)
    {
        $validatedData = $request->validate([
            'nom' => 'required|string',
            'prenom' => 'required|string',
            'email' => 'required|email',
            'date' => 'required|date',
            'heure_arr' => 'required|date_format:H:i',
            'heure_dep' => 'nullable|date_format:H:i',
        ]);

        $personnel = Personnel::where('email', $request->email)->first();
        if (!$personnel) {
            return redirect()->back()->with('error', 'Employé non trouvé.');
        }

        $pointage = Pointage::find($id);
        $pointage->personnel_id = $personnel->id;
        $pointage->date = $request->date;
        $pointage->heure_arr = $request->heure_arr;
        $pointage->heure_dep = $request->heure_dep; // Utilisez directement l'heure de départ fournie

        $pointage->save();

        return redirect()->route('pointage.index')->with('success', 'Pointage modifié avec succès');
    }

    public function destroy(string $id)
    {
        $pointage = Pointage::find($id);
        $pointage->delete();

        return redirect()->route('pointage.index')->with('success', 'Pointage supprimé avec succès');
    }



    private function calculerHeureDepart(string $heureArr, ?string $heureDep, int $horairesTravail): string
    {
        if ($heureArr) {
            $heuretm = $horairesTravail * 60;
            list($heures, $minutes) = explode(':', $heureArr);
            $heureAem = intval($heures) * 60 + intval($minutes);
            $heureDem = $heureAem + $heuretm;
            $heureDep = sprintf("%02d:%02d", floor($heureDem / 60), $heureDem % 60);
        }

        return $heureDep;
    }



}
































<?php

namespace App\Http\Controllers;

use App\Models\Paiement;
use App\Models\Personnel;
use App\Models\Pointage;
use App\Models\Administrateur;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\URL;
use SimpleSoftwareIO\QrCode\Facades\QrCode;

class PersonnelController extends Controller
{
    public function dashboard()
    {
        $totalEmployees = Personnel::count();
        $totalPointages = Pointage::count();
        $totalPaiements = Paiement::count();
        $totalAdministrateurs = Administrateur::count();
        $personnels = Personnel::all();
        $administrateurs = Administrateur::all();

        return view('/personnel/dashboard', compact('totalEmployees', 'totalPointages', 'totalPaiements', 'totalAdministrateurs', 'personnels', 'administrateurs'));
    }

    public function generateQrCode($id)
    {
        $personnel = Personnel::find($id);
        if (!$personnel) {
            return redirect()->back()->with('error', 'Personnel not found');
        }
        $url = URL::route('personnel.details', ['id' => $id]);
        $qrCode = QrCode::size(200)->generate($url);
        return view('/personnel/qrcode', [
            'qrCode' => $qrCode,
            'personnel' => $personnel,
        ]);
    }


    /**
     * Display a listing of the resource.
     */
    public function index()
    {
        $personnels = Personnel::orderBy('id', 'asc')->paginate(6);
        return view('personnel.index', ['personnels' => $personnels]);
    }
    public function show($id){
        $personnel = Personnel::find($id);
        if (!$personnel) {
            return redirect()->back()->with('error', 'Personnel not found');
        }

        return view('personnel.details', ['personnel' => $personnel]);
    }

    /**
     * Show the form for creating a new resource.
     */
    public function create()
    {
        $personnel = new Personnel();
        return view('personnel.create', ['personnel' => $personnel]);
    }

    /**
     * Store a newly created resource in storage.
     */
    public function store(Request $request)
    {
        $validatedData = $request->validate([
            'nom' => 'required',
            'prenom' => 'required',
            'telephone' => 'required',
            'carte_identite' => 'required',
            'horaires_travail' => 'required',
            'email' => 'required|email|unique:personnels',
            'cjm' => 'required|numeric',
        ]);

        $qrCodeContent = $request->email;
        $qrCode = QrCode::format('svg')->size(100)->generate($qrCodeContent);

        $personnel = new Personnel();
        $personnel->nom = $request->nom;
        $personnel->prenom = $request->prenom;
        $personnel->telephone = $request->telephone;
        $personnel->carte_identite = $request->carte_identite;
        $personnel->horaires_travail = $request->horaires_travail;
        $personnel->email = $request->email;
        $personnel->qr_code = $qrCode;
        $personnel->cjm = $request->cjm;
        $personnel->save();

        return redirect()->route('personnel.index')->with('success', 'Personnel ajouté avec succès');
    }

    /**
     * Show the form for editing the specified resource.
     */
    public function edit(string $id)
    {
        $personnel = Personnel::find($id);
        return view('personnel.edit', ['personnel' => $personnel]);
    }

    /**
     * Update the specified resource in storage.
     */
    public function update(Request $request, string $id)
    {
        $validatedData = $request->validate([
            'nom' => 'required',
            'prenom' => 'required',
            'telephone' => 'required',
            'carte_identite' => 'required',
            'horaires_travail' => 'required',
            'email' => 'required|email|unique:personnels,email,'.$id,
            'cjm' => 'required|numeric',
        ]);

        $personnel = Personnel::find($id);
        $personnel->nom = $request->nom;
        $personnel->prenom = $request->prenom;
        $personnel->telephone = $request->telephone;
        $personnel->carte_identite = $request->carte_identite;
        $personnel->horaires_travail = $request->horaires_travail;
        $personnel->email = $request->email;
        $personnel->cjm = $request->cjm;

        $personnel->save();
        return redirect()->route('personnel.index')->with('success', 'Personnel modifié avec succès');
    }

    /**
     * Remove the specified resource from storage.
     */
    public function destroy(string $id)
    {
        $personnel = Personnel::find($id);
        $personnel->delete();
        return redirect()->route('personnel.index')->with('success', 'Personnel supprimé avec succès');
    }
}
